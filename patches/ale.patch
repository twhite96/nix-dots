diff --git a/ale_linters/cpp/clang.vim b/ale_linters/cpp/clang.vim
index e48291e..e1d2891 100644
--- a/ale_linters/cpp/clang.vim
+++ b/ale_linters/cpp/clang.vim
@@ -4,13 +4,34 @@
 call ale#Set('cpp_clang_executable', 'clang++')
 call ale#Set('cpp_clang_options', '-std=c++14 -Wall')
 
+" The directory to change to before running mypy
+function! s:GetDir(buffer) abort
+    " If we find a directory with "mypy.ini" in it use that,
+    " else try and find the "python project" root, or failing
+    " that, run from the same folder as the current file
+    for l:path in ale#path#Upwards(expand('#' . a:buffer . ':p:h'))
+        if filereadable(l:path . '/WORKSPACE')
+            return l:path
+        endif
+    endfor
+endfunction
+
+
 function! ale_linters#cpp#clang#GetCommand(buffer, output) abort
     let l:cflags = ale#c#GetCFlags(a:buffer, a:output)
+    let l:dir = s:GetDir(a:buffer)
+    let l:containing = split(l:dir, "/")[-1]
 
+    " echo join(split(glob('bazel-src/external/*'), '\n'), ' -iquote ')
     " -iquote with the directory the file is in makes #include work for
     "  headers in the same directory.
-    return '%e -S -x c++ -fsyntax-only'
-    \   . ' -iquote ' . ale#Escape(fnamemodify(bufname(a:buffer), ':p:h'))
+    return ale#path#CdString(l:dir)
+    \   . '%e -S -x c++ -fsyntax-only -ferror-limit=0'
+    \   . ' -I ' . l:dir . '/bazel-out/k8-fastbuild/bin'
+    \   . ' -I ' . join(split(glob(l:dir . '/bazel-out/host/bin/**/*_proto_pb'), '\n'), ' -I ')
+    \   . ' -isystem ' . join(split(glob(l:dir . '/bazel-' . l:containing . '/external/*'), '\n'), ' -isystem ')
+    \   . ' -iquote ' . join(split(glob(l:dir . '/bazel-' . l:containing . '/external/*'), '\n'), ' -iquote ')
+    \   . ' -I ' . l:dir
     \   . ale#Pad(l:cflags)
     \   . ale#Pad(ale#Var(a:buffer, 'cpp_clang_options')) . ' -'
 endfunction
diff --git a/ale_linters/cuda/nvcc.vim b/ale_linters/cuda/nvcc.vim
index f3af07b..cd20ac5 100644
--- a/ale_linters/cuda/nvcc.vim
+++ b/ale_linters/cuda/nvcc.vim
@@ -1,49 +1,16 @@
 " Author: blahgeek <i@blahgeek.com>
 " Description: NVCC linter for cuda files
 
-call ale#Set('cuda_nvcc_executable', 'nvcc')
-call ale#Set('cuda_nvcc_options', '-std=c++11')
-
-function! ale_linters#cuda#nvcc#GetCommand(buffer) abort
-    " Unused: use ale#util#nul_file
-    " let l:output_file = ale#util#Tempname() . '.ii'
-    " call ale#command#ManageFile(a:buffer, l:output_file)
-    return '%e -cuda'
-    \   . ale#Pad(ale#c#IncludeOptions(ale#c#FindLocalHeaderPaths(a:buffer)))
-    \   . ale#Pad(ale#Var(a:buffer, 'cuda_nvcc_options'))
-    \   . ' %s -o ' . g:ale#util#nul_file
-endfunction
-
-function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort
-    " Look for lines like the following.
-    "
-    " test.cu(8): error: argument of type "void *" is incompatible with parameter of type "int *"
-    let l:pattern = '\v^([^:\(\)]+):?\(?(\d+)\)?:(\d+)?:?\s*\w*\s*(error|warning): (.+)$'
-    let l:output = []
-
-    for l:match in ale#util#GetMatches(a:lines, l:pattern)
-        let l:item = {
-        \   'lnum': str2nr(l:match[2]),
-        \   'type': l:match[4] =~# 'error' ? 'E' : 'W',
-        \   'text': l:match[5],
-        \   'filename': fnamemodify(l:match[1], ':p'),
-        \}
-
-        if !empty(l:match[3])
-            let l:item.col = str2nr(l:match[3])
-        endif
-
-        call add(l:output, l:item)
-    endfor
-
-    return l:output
-endfunction
+source ~/.vim/plugged/ale/ale_linters/cpp/clang
+call ale#Set('cpp_nvcc_executable', 'clang++')
+call ale#Set('cuda_nvcc_executable', 'clang++')
+call ale#Set('cuda_nvcc_options', '-std=c++14 -Wall --cuda-gpu-arch=sm_30 -pthread')
 
 call ale#linter#Define('cuda', {
-\   'name': 'nvcc',
+\   'name': 'clang',
 \   'output_stream': 'stderr',
 \   'executable': {b -> ale#Var(b, 'cuda_nvcc_executable')},
-\   'command': function('ale_linters#cuda#nvcc#GetCommand'),
-\   'callback': 'ale_linters#cuda#nvcc#HandleNVCCFormat',
+\   'command': {b -> ale#c#RunMakeCommand(b, function('ale_linters#cpp#clang#GetCommand'))},
+\   'callback': 'ale#handlers#gcc#HandleGCCFormatWithIncludes',
 \   'lint_file': 1,
 \})
